[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "spectra-api"
version = "3.0.0"
description = "SpectraAI API - Advanced AI Assistant Backend (2025 Edition)"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "SpectraAI Team", email = "dev@spectraai.com"}
]
keywords = ["ai", "assistant", "api", "fastapi", "emotional-intelligence"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

# ======================================
# Ruff Configuration - Modern Python Linter
# ======================================
[tool.ruff]
# Targeting Python 3.11+ for modern features
target-version = "py311"

# Line length matching Black
line-length = 88

# File patterns to include/exclude
extend-exclude = [
    "__pycache__",
    ".git",
    ".venv",
    "venv",
    "dist",
    "build",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
]

[tool.ruff.lint]
# Enable comprehensive rule sets for modern Python development
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings  
    "F",      # Pyflakes
    "UP",     # pyupgrade (modern Python syntax)
    "B",      # flake8-bugbear (common bugs)
    "SIM",    # flake8-simplify (code simplification)
    "I",      # isort (import sorting)
    "N",      # pep8-naming (naming conventions)
    "D",      # pydocstyle (docstring conventions)
    "S",      # flake8-bandit (security)
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EXE",    # flake8-executable
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "TCH",    # flake8-type-checking
    "INT",    # flake8-gettext
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate (commented code)
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PL",     # Pylint
    "TRY",    # tryceratops (exception handling)
    "FLY",    # flynt (f-string conversion)
    "NPY",    # NumPy-specific rules
    "PERF",   # Perflint (performance anti-patterns)
    "RUF",    # Ruff-specific rules
]

# Rules to ignore for practical development
ignore = [
    "D100",   # Missing docstring in public module
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in __init__
    "D203",   # 1 blank line required before class docstring (conflicts with D211)
    "D213",   # Multi-line docstring summary should start at the second line (conflicts with D212)
    "S101",   # Use of assert detected (common in tests)
    "S104",   # Possible binding to all interfaces
    "COM812", # Trailing comma missing (conflicts with formatter)
    "ISC001", # Implicitly concatenated string literals (conflicts with formatter)
]

# Per-file customizations
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D104"]  # Allow unused imports and missing docstrings
"tests/**/*.py" = [
    "S101",    # Allow assertions in tests
    "ARG",     # Allow unused arguments in test fixtures
    "FBT",     # Allow boolean traps in tests
    "PLR2004", # Allow magic values in tests
    "S105",    # Allow hardcoded passwords in tests
    "S106",    # Allow hardcoded passwords in tests
]
"conftest.py" = ["D100", "D103"]
"**/migrations/**/*.py" = ["D100", "D101", "D102", "D103"]  # Database migrations
"scripts/**/*.py" = ["T201", "S602", "S603"]  # Allow prints and subprocess in scripts

[tool.ruff.lint.isort]
# Import organization
force-single-line = false
force-sort-within-sections = true
known-first-party = ["app", "core", "models", "services", "utils"]
known-third-party = ["fastapi", "pydantic", "sqlalchemy", "openai"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.pydocstyle]
# Docstring style - Google convention
convention = "google"

[tool.ruff.lint.pylint]
# Pylint-specific settings
max-args = 6
max-branches = 12
max-returns = 6
max-statements = 50

# ======================================
# Black Configuration - Code Formatting
# ======================================
[tool.black]
# Consistent with Ruff line length
line-length = 88

# Target Python versions
target-version = ["py311", "py312"]

# File patterns
extend-exclude = '''
/(
    \.git
    | \.venv
    | venv
    | \.pytest_cache
    | \.mypy_cache
    | \.ruff_cache
    | __pycache__
    | build
    | dist
    | \.egg-info
)/
'''

# Modern Python features
preview = true

# String formatting
skip-string-normalization = false
skip-magic-trailing-comma = false

# ======================================
# MyPy Configuration - Type Checking
# ======================================
[tool.mypy]
# Python version and features
python_version = "3.11"
platform = "linux"

# Type checking strictness
strict = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true

# Import discovery
namespace_packages = true
explicit_package_bases = true

# Error output
show_error_codes = true
show_column_numbers = true
show_error_context = true
color_output = true
error_summary = true

# Cache and performance
cache_dir = ".mypy_cache"
incremental = true

# Files to check
files = ["app", "tests"]
exclude = [
    "build/",
    "dist/",
    "venv/",
    ".venv/",
]

# Per-module configuration
[[tool.mypy.overrides]]
module = [
    "openai.*",
    "uvicorn.*",
    "prisma.*",
    "clerk.*",
]
ignore_missing_imports = true

# ======================================
# Pytest Configuration - Testing
# ======================================
[tool.pytest.ini_options]
# Test discovery
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Output and logging
addopts = [
    "-ra",                          # Show all test results
    "--strict-markers",             # Strict marker validation
    "--strict-config",              # Strict config validation
    "--disable-warnings",           # Clean output
    "--tb=short",                   # Concise traceback format
    "--cov=app",                    # Coverage for app module
    "--cov-report=term-missing",    # Show missing coverage
    "--cov-report=html:htmlcov",    # HTML coverage report
    "--cov-report=xml:coverage.xml", # XML coverage for CI
    "--cov-fail-under=80",          # Minimum coverage threshold
]

# Async testing
asyncio_mode = "auto"

# Test markers for organization
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "auth: marks tests as authentication tests",
    "db: marks tests as database tests",
]

# Filtering and warnings
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# ======================================
# Coverage Configuration
# ======================================
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "*/conftest.py",
    "*/settings/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "TYPE_CHECKING",
]

[tool.coverage.html]
directory = "htmlcov"

# ======================================
# Additional Tools Configuration
# ======================================

# isort configuration (backup to Ruff)
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app", "core", "models", "services", "utils"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "openai"]
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
