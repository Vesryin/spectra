[build-system]
requires = ["setuptools>=70.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "spectra-api"
version = "3.0.0"
description = "SpectraAI API - Advanced AI Assistant Backend (2025 Edition)"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "SpectraAI Team", email = "dev@spectraai.com"}
]
keywords = ["ai", "assistant", "api", "fastapi", "emotional-intelligence", "2025"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: FastAPI",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Operating System :: OS Independent",
]

# ======================================
# ======================================
# üõ†Ô∏è RUFF CONFIGURATION - Modern Python Linter
# Fast, comprehensive Python code quality and style enforcement
# 
# Philosophy:
# - Comprehensive rule coverage for modern Python development
# - Performance-optimized for large codebases
# - Modular configuration for easy maintenance
# - Compatible with FastAPI and AI/ML workflows
# - Adaptive rules that evolve with Python versions
# 
# Architecture:
# - Core quality rules (errors, warnings, style)
# - Modern Python syntax enforcement (3.11+)
# - Security and performance best practices
# - Import organization and code structure
# - Documentation and type hint requirements
# 
# Maintenance:
# - Rules organized by category for clarity
# - Per-file overrides for specific contexts
# - Environment-specific configurations
# - Integration with CI/CD and development tools
# ======================================

[tool.ruff]
# Target modern Python versions for latest features
target-version = "py311"

# Optimal line length for code readability and team collaboration
line-length = 88

# File discovery and processing patterns
extend-exclude = [
    "__pycache__",
    ".git",
    ".venv",
    "venv",
    "dist",
    "build",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    "migrations",
    "alembic",
    ".tox",
    ".coverage",
    "htmlcov",
]

# ===== LINTING CONFIGURATION =====
[tool.ruff.lint]
# Comprehensive rule sets for modern Python development
select = [
    # ===== CORE PYTHON QUALITY =====
    "E",      # pycodestyle errors (PEP 8 compliance)
    "W",      # pycodestyle warnings
    "F",      # Pyflakes (undefined names, unused imports)
    
    # ===== MODERN PYTHON SYNTAX =====
    "UP",     # pyupgrade (modern Python syntax)
    "B",      # flake8-bugbear (common Python bugs)
    "SIM",    # flake8-simplify (code simplification)
    "C4",     # flake8-comprehensions (list/dict comprehensions)
    
    # ===== CODE ORGANIZATION =====
    "I",      # isort (import sorting and organization)
    "N",      # pep8-naming (naming conventions)
    "D",      # pydocstyle (docstring conventions)
    
    # ===== SECURITY & RELIABILITY =====
    "S",      # flake8-bandit (security vulnerabilities)
    "BLE",    # flake8-blind-except (catch exceptions properly)
    "A",      # flake8-builtins (avoid shadowing builtins)
    "T10",    # flake8-debugger (remove debug statements)
    "G",      # flake8-logging-format (proper logging)
    
    # ===== PERFORMANCE & BEST PRACTICES =====
    "PERF",   # Perflint (performance anti-patterns)
    "FURB",   # refurb (modern Python patterns)
    "RUF",    # Ruff-specific rules
    "PIE",    # flake8-pie (unnecessary code patterns)
    "PT",     # flake8-pytest-style (pytest best practices)
    
    # ===== FASTAPI & WEB DEVELOPMENT =====
    "FBT",    # flake8-boolean-trap (boolean arguments)
    "DTZ",    # flake8-datetimez (timezone awareness)
    "COM",    # flake8-commas (trailing commas)
    "ICN",    # flake8-import-conventions (import aliases)
    
    # ===== TYPE HINTS & ANNOTATIONS =====
    "TCH",    # flake8-type-checking (type checking imports)
    "PYI",    # flake8-pyi (stub file conventions)
    "ARG",    # flake8-unused-arguments
    
    # ===== DOCUMENTATION & MAINTENANCE =====
    "ERA",    # eradicate (commented-out code)
    "PGH",    # pygrep-hooks (miscellaneous checks)
    "PL",     # Pylint (comprehensive static analysis)
    "TRY",    # tryceratops (exception handling best practices)
    
    # ===== API & DATA HANDLING =====
    "Q",      # flake8-quotes (quote consistency)
    "RSE",    # flake8-raise (exception raising patterns)
    "RET",    # flake8-return (return statement patterns)
    "PTH",    # flake8-use-pathlib (modern path handling)
    
    # ===== SPECIALIZED DOMAINS =====
    "NPY",    # NumPy-specific rules (for AI/ML code)
    "PD",     # pandas-vet (pandas best practices)
    "AIR",    # Airflow-specific rules (if using workflow orchestration)
]

# Rules to ignore for practical development
ignore = [
    # ===== DOCUMENTATION PRAGMATISM =====
    "D100",   # Missing docstring in public module (too verbose for small modules)
    "D104",   # Missing docstring in public package (__init__.py files)
    "D105",   # Missing docstring in magic method (often self-explanatory)
    "D107",   # Missing docstring in __init__ (often redundant with class docstring)
    
    # ===== DOCSTRING STYLE CONFLICTS =====
    "D203",   # 1 blank line required before class docstring (conflicts with D211)
    "D213",   # Multi-line docstring summary should start at the second line (conflicts with D212)
    
    # ===== TESTING & DEVELOPMENT =====
    "S101",   # Use of assert detected (acceptable in tests and type checking)
    "S104",   # Possible binding to all interfaces (common in development)
    "S108",   # Probable insecure usage of temp file/directory (context-dependent)
    
    # ===== FORMATTER COMPATIBILITY =====
    "COM812", # Trailing comma missing (handled by Black formatter)
    "ISC001", # Implicitly concatenated string literals (conflicts with Black)
    
    # ===== PRACTICAL DEVELOPMENT =====
    "PLR0913", # Too many arguments to function call (context-dependent)
    "PLR2004", # Magic value used in comparison (often necessary)
    "B008",    # Do not perform function calls in argument defaults (FastAPI dependency pattern)
]

# ===== CONTEXT-SPECIFIC RULE OVERRIDES =====
[tool.ruff.lint.per-file-ignores]
# Configuration and initialization files
"__init__.py" = [
    "F401",    # Allow unused imports (often used for module structure)
    "D104",    # Missing docstring in public package
    "E402",    # Module level import not at top of file (sometimes necessary)
]

# Test files - more relaxed rules for testing context
"tests/**/*.py" = [
    "S101",    # Allow assertions in tests (primary testing pattern)
    "ARG",     # Allow unused arguments in test fixtures
    "FBT",     # Allow boolean traps in tests (test data patterns)
    "PLR2004", # Allow magic values in tests (test data)
    "S105",    # Allow hardcoded passwords in tests (test fixtures)
    "S106",    # Allow hardcoded passwords in tests (test fixtures)
    "S311",    # Allow pseudo-random generators in tests
    "D100",    # Missing module docstring (test files are self-documenting)
    "D101",    # Missing class docstring in tests
    "D102",    # Missing function docstring in tests
    "D103",    # Missing function docstring in tests
]

# Test configuration files
"conftest.py" = ["D100", "D103"]

# Database migrations (auto-generated, minimal modification)
"**/migrations/**/*.py" = [
    "D100", "D101", "D102", "D103",  # Missing docstrings
    "E501",    # Line too long (migration files can be verbose)
    "F401",    # Unused imports (migration dependencies)
]

# Development and deployment scripts
"scripts/**/*.py" = [
    "T201",    # Allow prints in scripts (often necessary for output)
    "S602",    # Allow subprocess calls (script functionality)
    "S603",    # Allow subprocess calls without shell=True check
    "PLR0913", # Allow many arguments in CLI scripts
]

# FastAPI application files
"app/**/*.py" = [
    "B008",    # Allow function calls in defaults (FastAPI dependency injection)
    "UP007",   # Use X | Y for Union (FastAPI compatibility)
]

# ===== IMPORT ORGANIZATION =====
[tool.ruff.lint.isort]
# Modern import organization following PEP 8 and team conventions
force-single-line = false
force-sort-within-sections = true
case-sensitive = false

# Custom module classification for clean import organization
known-first-party = ["app", "core", "models", "services", "utils", "config"]
known-third-party = ["fastapi", "pydantic", "sqlalchemy", "openai", "numpy", "pandas"]

# Import section organization
section-order = [
    "future",
    "standard-library", 
    "third-party",
    "first-party",
    "local-folder"
]

# Visual separation and formatting
split-on-trailing-comma = true
force-wrap-aliases = true
combine-as-imports = true

# ===== DOCSTRING STANDARDS =====
[tool.ruff.lint.pydocstyle]
# Google-style docstrings for consistency and tooling compatibility
convention = "google"

# ===== PYLINT INTEGRATION =====
[tool.ruff.lint.pylint]
# Complexity and maintainability thresholds
max-args = 8              # Function argument limit
max-branches = 15         # Branching complexity limit
max-returns = 8           # Return statement limit  
max-statements = 60       # Function statement limit
max-public-methods = 25   # Class method limit

# ===== TYPE CHECKING OPTIMIZATION =====
[tool.ruff.lint.flake8-type-checking]
# Optimize imports for type checking performance
runtime-evaluated-base-classes = ["pydantic.BaseModel"]
runtime-evaluated-decorators = ["pydantic.validate_arguments"]

# ======================================
# Black Configuration - Code Formatting
# ======================================
[tool.black]
# Consistent with Ruff line length
line-length = 88

# Target Python versions
target-version = ["py311", "py312"]

# File patterns
extend-exclude = '''
/(
    \.git
    | \.venv
    | venv
    | \.pytest_cache
    | \.mypy_cache
    | \.ruff_cache
    | __pycache__
    | build
    | dist
    | \.egg-info
)/
'''

# Modern Python features
preview = true

# String formatting
skip-string-normalization = false
skip-magic-trailing-comma = false

# ======================================
# MyPy Configuration - Type Checking
# ======================================
[tool.mypy]
# Python version and features
python_version = "3.11"
platform = "linux"

# Type checking strictness
strict = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true

# Import discovery
namespace_packages = true
explicit_package_bases = true

# Error output
show_error_codes = true
show_column_numbers = true
show_error_context = true
color_output = true
error_summary = true

# Cache and performance
cache_dir = ".mypy_cache"
incremental = true

# Files to check
files = ["app", "tests"]
exclude = [
    "build/",
    "dist/",
    "venv/",
    ".venv/",
]

# Per-module configuration
[[tool.mypy.overrides]]
module = [
    "openai.*",
    "uvicorn.*",
    "prisma.*",
    "clerk.*",
]
ignore_missing_imports = true

# ======================================
# Pytest Configuration - Testing
# ======================================
[tool.pytest.ini_options]
# Test discovery
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Output and logging
addopts = [
    "-ra",                          # Show all test results
    "--strict-markers",             # Strict marker validation
    "--strict-config",              # Strict config validation
    "--disable-warnings",           # Clean output
    "--tb=short",                   # Concise traceback format
    "--cov=app",                    # Coverage for app module
    "--cov-report=term-missing",    # Show missing coverage
    "--cov-report=html:htmlcov",    # HTML coverage report
    "--cov-report=xml:coverage.xml", # XML coverage for CI
    "--cov-fail-under=80",          # Minimum coverage threshold
]

# Async testing
asyncio_mode = "auto"

# Test markers for organization
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "auth: marks tests as authentication tests",
    "db: marks tests as database tests",
]

# Filtering and warnings
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# ======================================
# Coverage Configuration
# ======================================
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "*/conftest.py",
    "*/settings/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "TYPE_CHECKING",
]

[tool.coverage.html]
directory = "htmlcov"

# ======================================
# Additional Tools Configuration
# ======================================

# isort configuration (backup to Ruff)
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app", "core", "models", "services", "utils"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "openai"]
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
